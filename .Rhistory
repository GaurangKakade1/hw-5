renv::snapshot()
q()
packages <- c(
"dplyr",
"readr",
"tidyr",
"purrr",
"broom",
"magrittr",
"corrplot",
"caret",
"rpart",
"rpart.plot",
"e1071",
"torch",
"luz"
)
# renv::install(packages)
sapply(packages, require, character.only=T)
install.packages("dplyr")
install.packages("readr")
install.packages("readr")
install.packages("purrr")
install.packages("broom")
install.packages("magrittr")
install.packages("corrplot")
install.packages("caret")
install.packages("rpart")
install.packages("rpart.plot")
install.packages("e1071")
install.packages("torch")
packages <- c(
"dplyr",
"readr",
"tidyr",
"purrr",
"broom",
"magrittr",
"corrplot",
"caret",
"rpart",
"rpart.plot",
"e1071",
"torch",
"luz"
)
# renv::install(packages)
sapply(packages, require, character.only=T)
install.packages("luz")
packages <- c(
"dplyr",
"readr",
"tidyr",
"purrr",
"broom",
"magrittr",
"corrplot",
"caret",
"rpart",
"rpart.plot",
"e1071",
"torch",
"luz"
)
# renv::install(packages)
sapply(packages, require, character.only=T)
pt(10.78, df = 22)
pchisq(10.78, df = 22)
pt(31.466, df = 26)
pt(1 - 31.466, df = 26)
pt(31.466, df = 26) - 1
critical_value <- (800 - 800) / 3.16
probability_type1_error <- pnorm(critical_value, mean = 0, sd = 1)
probability_type1_error
z_critical <- qnorm(0.05, mean = 0, sd = 1)
z_critical
c <- 800 + z_critical * 3.16
c
qnorm(p = 1-0.05, mean = 0, sd = 1)
qnorm(p = 0.05, mean = 0, sd = 1)
qnorm(p = 1-0.05, mean = 0, sd = 1)
-qnorm(p = 1-0.05, mean = 0, sd = 1)
qnorm(p = 1-0.95, mean = 0, sd = 1)
-qnorm(p = 1-0.95, mean = 0, sd = 1)
qnorm(p = 1-0.05, mean = 0, sd = 1)
800 + qnorm(p = 1-0.05, mean = 0, sd = 1) * (10/sqrt(10))
(800-810)/(10/sqrt(10))
probability <- pnorm(-3.16, mean = 0, sd = 1)
probability
probability <- pnorm(-3.162278, mean = 0, sd = 1)
probability
(805.2015 - 810)/(10/sqrt(10))
probability <- pnorm(-1.517419, mean = 0, sd = 1)
probability
packages <- c(
"dplyr",
"readr",
"tidyr",
"purrr",
"broom",
"magrittr",
"corrplot",
"caret",
"rpart",
"rpart.plot",
"e1071",
"torch",
"luz"
)
# renv::install(packages)
sapply(packages, require, character.only=T)
packages <- c(
"dplyr",
"readr",
"tidyr",
"purrr",
"broom",
"magrittr",
"corrplot",
"caret",
"rpart",
"rpart.plot",
"e1071",
"torch",
"luz"
)
# renv::install(packages)
sapply(packages, require, character.only=T)
path <- "data/housing.csv"
# Read the data file as a tibble in R
df <- read.csv(path)
# categorical variables are encoded as factors
View(df)
path <- "data/housing.csv"
# Read the data file as a tibble in R
df <- read.csv(path)
# categorical variables are encoded as factors
df <- df %>%
mutate(ocean_proximity = as.factor(ocean_proximity))
# Converting all the columns names to lower case for consistency.
colnames(df) <- tolower(colnames(df))
# Any observations with missing values are dropped
df <- df %>%
drop_na()
View(df)
str(df)
path <- "data/housing.csv"
# Read the data file as a tibble in R
df <- read.csv(path) %>% as_tibble()
# categorical variables are encoded as factors
df <- df %>%
mutate(ocean_proximity = as.factor(ocean_proximity))
# Converting all the columns names to lower case for consistency.
colnames(df) <- tolower(colnames(df))
# Any observations with missing values are dropped
df <- df %>%
drop_na()
cor_matrix <- df %>%
keep(is.numeric) %>%
cor()
corrplot(cor_matrix,type = "upper", order = "hclust" )
set.seed(42)
test_ind <- sample(
1:nrow(df),
floor( nrow(df)/10 ),
replace=FALSE
)
df_train <- df[-test_ind,]
df_test  <- df[test_ind, ]
lm_fit <- lm(median_house_value ~. data = df_train)
set.seed(42)
test_ind <- sample(
1:nrow(df),
floor( nrow(df)/10 ),
replace=FALSE
)
df_train <- df[-test_ind,]
df_test  <- df[test_ind, ]
lm_fit <- lm(median_house_value ~. data = df_train)
lm_fit <- lm(median_house_value ~., data = df_train)
summary(lm_fit)
rmse <- function(y, yhat) {
sqrt(mean((y - yhat)^2))
}
lm_predictions <- rmse(median_house_value ~., data = df_test)
rmse <- function(y, yhat) {
sqrt(mean((y - yhat)^2))
}
lm_predictions <- lm(median_house_value ~., data = df_test)
rmse(lm_predictions)
rmse <- function(y, yhat) {
sqrt(mean((y - yhat)^2))
}
lm_predictions <- predict(lm_fit, data = df_test)
rmse <- function(y, yhat) {
sqrt(mean((y - yhat)^2))
}
lm_predictions <- predict(lm_fit, data = df_test)
test_rmse <- rmse(df$median_house_value, lm_predictions)
test_rmse
length(df_test$median_house_value)
length(lm_predictions)
set.seed(42)
test_ind <- sample(
1:nrow(df),
floor( nrow(df)/10 ),
replace=FALSE
)
df_train <- df[-test_ind,]
df_test  <- df[test_ind, ]
lm_fit <- lm(median_house_value ~., data = df_train)
summary(lm_fit)
length(df_test$median_house_value)
length(lm_predictions)
length(df_test$median_house_value)
length(lm_predictions)
rmse <- function(y, yhat) {
sqrt(mean((y - yhat)^2))
}
lm_predictions <- predict(lm_fit, newdata = df_test)
test_rmse <- rmse(df$median_house_value, lm_predictions)
test_rmse
set.seed(42)
test_ind <- sample(
1:nrow(df),
floor( nrow(df)/10 ),
replace=FALSE
)
df_train <- df[-test_ind,]
df_test  <- df[test_ind, ]
path <- "data/housing.csv"
# Read the data file as a tibble in R
df <- read.csv(path)
# categorical variables are encoded as factors
df <- df %>%
mutate(ocean_proximity = as.factor(ocean_proximity))
# Converting all the columns names to lower case for consistency.
colnames(df) <- tolower(colnames(df))
# Any observations with missing values are dropped
df <- df %>%
drop_na()
cor_matrix <- df %>%
keep(is.numeric) %>%
cor()
corrplot(cor_matrix,type = "upper", order = "hclust" )
set.seed(42)
test_ind <- sample(
1:nrow(df),
floor( nrow(df)/10 ),
replace=FALSE
)
df_train <- df[-test_ind,]
df_test  <- df[test_ind, ]
lm_fit <- lm(median_house_value ~., data = df_train)
summary(lm_fit)
length(df_test$median_house_value)
length(lm_predictions)
rmse <- function(y, yhat) {
sqrt(mean((y - yhat)^2))
}
lm_predictions <- predict(lm_fit, data = df_test)
test_rmse <- rmse(df$median_house_value, lm_predictions)
test_rmse
rmse <- function(y, yhat) {
sqrt(mean((y - yhat)^2))
}
lm_predictions <- predict(lm_fit, data = df_test)
test_rmse <- rmse(df$median_house_value, lm_predictions)
test_rmse
lm_fit <- lm(median_house_value ~., data = df_train)
summary(lm_fit)
rmse <- function(y, yhat) {
sqrt(mean((y - yhat)^2))
}
lm_predictions <- predict(lm_fit, data = df_test)
test_rmse <- rmse(df$median_house_value, lm_predictions)
test_rmse
length(df_test$median_house_value)
length(lm_predictions)
set.seed(42)
test_ind <- sample(
1:nrow(df),
floor( nrow(df)/10 ),
replace=FALSE
)
df_train <- df[-test_ind,]
df_test  <- df[test_ind, ]
lm_fit <- lm(median_house_value ~., data = df_train)
summary(lm_fit)
rmse <- function(y, yhat) {
sqrt(mean((y - yhat)^2))
}
lm_predictions <- predict(lm_fit, newdata = df_test)
test_rmse <- rmse(df$median_house_value, lm_predictions)
test_rmse
length(df_test$median_house_value)
length(lm_predictions)
path <- "data/housing.csv"
# Read the data file as a tibble in R
df <- read.csv(path)
# categorical variables are encoded as factors
df <- df %>%
mutate(ocean_proximity = as.factor(ocean_proximity))
# Converting all the columns names to lower case for consistency.
colnames(df) <- tolower(colnames(df))
# Any observations with missing values are dropped
df <- df %>%
drop_na()
cor_matrix <- df %>%
keep(is.numeric) %>%
cor()
corrplot(cor_matrix,type = "upper", order = "hclust" )
set.seed(42)
test_ind <- sample(
1:nrow(df),
floor( nrow(df)/10 ),
replace=FALSE
)
df_train <- df[-test_ind,]
df_test  <- df[test_ind, ]
lm_fit <- lm(median_house_value ~., data = df_train)
summary(lm_fit)
rmse <- function(y, yhat) {
sqrt(mean((y - yhat)^2))
}
lm_predictions <- predict(lm_fit, newdata = df_test)
test_rmse <- rmse(df$median_house_value, lm_predictions)
test_rmse
length(df_test$median_house_value)
length(lm_predictions)
rmse <- function(y, yhat) {
sqrt(mean((y - yhat)^2))
}
lm_predictions <- predict(lm_fit, newdata = df_test)
test_rmse <- rmse(df_test$median_house_value, lm_predictions)
test_rmse
rpart_fit <- rpart(median_house_value ~ ., data = df_train)
rpart_predictions <- predict(rpart_fit, newdata = df_test)
rpart.plot(rpart_fit)
rpart_predictions <- rmse(df_test$median_house_value, rpart_predictions)
rpart_predictions <- rmse(df_test$median_house_value, rpart_predictions)
rpart_predictions
rpart_predictions <- predict(rpart_fit, newdata = df_test)
rpart_rmse <- rmse(df_test$median_house_value, rpart_predictions)
rpart_rmse
rpart_predictions <- predict(rpart_fit, newdata = df_test)
rpart_rmse <- rmse(df_test$median_house_value, rpart_predictions)
rpart_rmse
rpart_predictions <- predict(rpart_fit, newdata = df_test)
rpart_rmse <- rmse(df_test$median_house_value, rpart_predictions)
rpart_rmse
svm_fit <- svm(median_house_value ~ ., data = df_train, kernel = "radial")
svm_predictions <- predict(svm_fit, newdata = df_test)
svm_rmse <- rmse(df_test$median_house_value, svm_predictions)
svm_rmse
NNet <- nn_module(
initialize = function(p, q1, q2, q3){
self$hidden1 <- nn_linear(p, q1)
self$hidden2 <- nn_linear(q1, q2)
self$hidden3 <- nn_linear(q2, q3)
self$output <- nn_linear(q3, 1)
self$activation <- nn_relu()
self$sigmoid <- nn_sigmoid()
},
forward = function(x){
x %>%
self$hidden1() %>% self$activation() %>%
self$hidden2() %>% self$activation() %>%
self$hidden3() %>% self$activation() %>%
self$output() %>% self$sigmoid()
}
)
df <- read.csv(spam.csv)
df <- read.csv("spam.csv")
df <- read.csv("data/spam.csv")
df <- read.csv("data/spam.csv")
df <- read.csv("data/spam.csv")
df <- read.csv("data/spam.csv")
df <- read.csv("data/spam.csv")
df <- read.csv("data/spam.csv")
df <- read.csv("data/spam.csv")
path <- "data/spam.csv"
df <- read.csv(path)
path <- "data/spam.csv"
df <- read.csv(path)
path <- "data/spam.csv"
df <- read.csv(path)
path <- "data/spam.csv"
df <- read.csv(path)
path <- "data/spam.csv"
df <- read.csv(path)
path <- "data/spam.csv"
df <- read.csv(path)
path <- "data/spam.csv"
df <- read.csv(path)
path <- "data/spam.csv"
df <- read.csv(path)
setwd("~/Desktop/STAT380/Homework5")
path <- "data/spam.csv"
df <- read.csv(path)
path <- "data/spam.csv"
df <- read.csv(path)
path <- "data/spam.csv"
df <- read.csv(path)
setwd("~/Desktop/STAT380/Homework5")
path <- "data/spam.csv"
df <- read.csv(path)
packages <- c(
"dplyr",
"readr",
"tidyr",
"purrr",
"broom",
"magrittr",
"corrplot",
"caret",
"rpart",
"rpart.plot",
"e1071",
"torch",
"luz"
)
# renv::install(packages)
sapply(packages, require, character.only=T)
path <- "data/housing.csv"
# Read the data file as a tibble in R
df <- read.csv(path)
# categorical variables are encoded as factors
df <- df %>%
mutate(ocean_proximity = as.factor(ocean_proximity))
# Converting all the columns names to lower case for consistency.
colnames(df) <- tolower(colnames(df))
# Any observations with missing values are dropped
df <- df %>%
drop_na()
cor_matrix <- df %>%
keep(is.numeric) %>%
cor()
corrplot(cor_matrix,type = "upper", order = "hclust" )
set.seed(42)
test_ind <- sample(
1:nrow(df),
floor( nrow(df)/10 ),
replace=FALSE
)
df_train <- df[-test_ind,]
df_test  <- df[test_ind, ]
lm_fit <- lm(median_house_value ~., data = df_train)
summary(lm_fit)
rmse <- function(y, yhat) {
sqrt(mean((y - yhat)^2))
}
lm_predictions <- predict(lm_fit, newdata = df_test)
test_rmse <- rmse(df_test$median_house_value, lm_predictions)
test_rmse
rpart_fit <- rpart(median_house_value ~ ., data = df_train)
rpart_predictions <- predict(rpart_fit, newdata = df_test)
rpart.plot(rpart_fit)
rpart_predictions <- predict(rpart_fit, newdata = df_test)
rpart_rmse <- rmse(df_test$median_house_value, rpart_predictions)
rpart_rmse
svm_fit <- svm(median_house_value ~ ., data = df_train, kernel = "radial")
svm_predictions <- predict(svm_fit, newdata = df_test)
svm_rmse <- rmse(df_test$median_house_value, svm_predictions)
svm_rmse
NNet <- nn_module(
initialize = function(p, q1, q2, q3){
self$hidden1 <- nn_linear(p, q1)
self$hidden2 <- nn_linear(q1, q2)
self$hidden3 <- nn_linear(q2, q3)
self$output <- nn_linear(q3, 1)
self$activation <- nn_relu()
self$sigmoid <- nn_sigmoid()
},
forward = function(x){
x %>%
self$hidden1() %>% self$activation() %>%
self$hidden2() %>% self$activation() %>%
self$hidden3() %>% self$activation() %>%
self$output() %>% self$sigmoid()
}
)
path <- "data/spam.csv"
df <- read.csv(path)
setwd("~/Desktop/STAT380/Homework5")
path <- "data/spam.csv"
df <- read.csv(path)
file.exists("data/spam.csv")
df <- read.csv("data/spam.csv")
